{"version":3,"sources":["components/button/Button.js","components/setup/Setup.js","components/square/Square.js","cpuMoves.js","components/gameboard/GameBoard.js","components/main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","buttonStyle","color","backgroundColor","bgColor","height","width","borderRadius","radius","boxShadow","cursor","className","onClick","style","text","defaultProps","Setup","isPlayerFirst","setFirstPlayer","isPlayerX","setPlayerMarker","startGame","Square","marker","val","setState","state","prevProps","this","id","index","Component","winningIndicies","mode","array","counter","i","key","toString","Object","keys","includes","parseInt","find","k","Math","max","apply","values","cpuMoves","gameState","computerMarker","winningCombo","slice","opponentMarkers","computerMarkers","j","length","splice","openCorners","push","combosConsidered","concat","filter","c","openSpots","combo","availableSpaces","floor","random","GameBoard","gameOverVerification","gameArray","selectSquare","isGameOver","console","log","playersTurn","newGameArray","playerMarker","prevState","playerMoves","computerMoves","Array","fill","Main","gameStarted","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1da5cdc1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Button.css';\n\nconst Button = (props) => {\n  const buttonStyle = {\n    color: props.color,\n    backgroundColor: props.bgColor,\n    height: props.height ? `${props.height}px` : 'inherit',\n    width: props.width ? `${props.width}px` : 'inherit',\n    borderRadius: `${props.radius}px`,\n    boxShadow: props.boxShadow,\n    cursor: props.cursor\n  }\n  return (\n    <div\n      className={'button ' + props.className}\n      onClick={props.onClick}\n      style={buttonStyle}\n    >\n      {props.text}\n    </div>\n  );\n}\n\nButton.defaultProps = {\n  color: '#000000',\n  bgColor: '#2ecc71',\n  radius: 10,\n  boxShadow:  '1px 2px 3px black',\n  cursor: 'pointer',\n  className: '',\n  text: 'Button'\n}\n\nButton.propTypes = {\n  color: PropTypes.string,\n  bgColor: PropTypes.string,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  radius: PropTypes.number,\n  boxShadow: PropTypes.string,\n  cursor: PropTypes.string,\n  className: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n  text: PropTypes.string\n}\n\nexport default Button;\n","import React from \"react\";\nimport Button from \"../button/Button\";\n\nimport \"./Setup.css\";\n\nconst Setup = (props) => {\n    return (\n      <div className=\"setup-container\">\n        <div className=\"setup-title\"><h3>Tic-Tac-Toe</h3></div>\n        <div className=\"setup-chooseFirst\">\n          <h5>Choose which player goes first</h5>\n          <Button\n            className={`chooseFirst${props.isPlayerFirst ? \" selected\" : \"\"}`}\n            onClick={() => props.setFirstPlayer(true)}\n            text=\"User\"\n          />\n          <Button\n            className={`chooseFirst${!props.isPlayerFirst ? \" selected\" : \"\"}`}\n            onClick={() => props.setFirstPlayer(false)}\n            text=\"CPU\"\n          />\n        </div>\n        <div className=\"setup-chooseMarker\">\n          <h5>Choose which marker you would like to use</h5>\n          <Button\n            className={`chooseMarker${props.isPlayerX ? \" selected\" : \"\"}`}\n            onClick={() => props.setPlayerMarker(true)}\n            text=\"X\"\n          />\n          <Button\n            className={`chooseMarker${!props.isPlayerX ? \" selected\" : \"\"}`}\n            onClick={() => props.setPlayerMarker(false)}\n            text=\"O\"\n          />\n        </div>\n        <div className=\"setup-gameStart\">\n          <Button\n            className='gameStart'\n            onClick={() => props.startGame()}\n            text=\"Start Game\"\n            bgColor=\"orange\"\n          />\n        </div>\n      </div>\n    )\n}\n\nexport default Setup;\n","import React, { Component } from 'react';\n\nimport './Square.css';\n\nclass Square extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      marker: ''\n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.marker !== this.props.marker) {\n      this.marker(this.props.marker);\n    }\n  }\n\n  marker = (val) => {\n    switch(val) {\n      case 1:\n        this.setState({marker: 'X'});\n        break;\n      case -1:\n        this.setState({marker: 'O'});\n        break;\n      default:\n        break;\n    }\n  }\n\n  render() {\n    return (\n      <div\n        id={this.props.index}\n        className=\"square\"\n        onClick={this.props.onClick}\n      >\n        <div className=\"square-marker\">\n          {this.state.marker}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Square;\n","export const winningIndicies = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [6, 4, 2]\n]\n\n// This function will be used to find the mode of a set of numbers in an array\nconst mode = (array) => {\n  let counter = {};\n  for (let i in array) {\n    let key = array[i].toString();\n    let keys = Object.keys(counter);\n    // If the counter object does not include a property that is the same as the current array value being observed, add it and initialize its value at 1. Otherwise, increment its value by 1.\n    if (!keys.includes(key)) {\n      counter[key] = 1;\n    } else {\n      counter[key] += 1;\n    }\n  }\n  // We find the value that had the largest number of occurrences and return it for the computer to make its move.\n  return parseInt(Object.keys(counter).find(k => counter[k] === Math.max.apply(Math, Object.values(counter))), 10);\n}\n\nexport function cpuMoves(gameState, computerMarker) {\n  // The first thing the computer should check for is if the user is in position to win on his/her next turn. If so, the computer must block the winning move.\n  for (let i in winningIndicies) {\n    // winningIndicies[i] should be scanned for 2 matching indicies in the set by the opponent's marker. The computer will simulatenously check for a blocking move as well as a winning move, to eliminate repetitive calculations\n    // To make sure we do not alter the original winningCombo array, we are creating a shallow copy of the combbination using the slice() method.\n    let winningCombo = winningIndicies[i].slice(0);\n    let opponentMarkers = 0;\n    let computerMarkers = 0;\n    for (let j = winningCombo.length - 1; j >= 0; j--) {\n      // For every index where an opponent's marker has been found, increment the opponent's counter and remove that index from the winningCombo array. This helps to narrow down which square the opponent is missing to win.\n      // Conversely, for every index where a computer marker is found, increment the computer's counter and remove that index from the winningCombo array to help figure out which index is needed to win.\n      if ((computerMarker * -1) === gameState[winningCombo[j]]) {\n        opponentMarkers++;\n        winningCombo.splice(j, 1);\n      } else if (computerMarker === gameState[winningCombo[j]]) {\n        computerMarkers++;\n        winningCombo.splice(j, 1);\n      }\n    }\n    // If the remaining space is found, either for a block or the win, place the computer marker there.\n    if ((opponentMarkers === 2 || computerMarkers === 2) && winningCombo.length === 1)\n      return winningCombo[0];\n  }\n  // By reaching this point, it is likely that neither a blocking or winning move was needed at this time. The next task the computer will do is check if the middle space (index 4) is already occupied. If it is not, the computer will place a marker there.\n  if (gameState[4] === 0)\n    return 4;\n  // If the middle space is taken, the next best move would be to occupy one of the 4 corner spaces (indicies 0, 2, 6, or 8). To determine which of these spaces to occupy, the computer will analyze the path of least resistance and make its decision after that.\n  // First, the computer will determine which (if any) of the corner spots are open.\n  var openCorners = [];\n  if (gameState[0] === 0)\n    openCorners.push(0);\n  if (gameState[2] === 0)\n    openCorners.push(2);\n  if (gameState[6] === 0)\n    openCorners.push(6);\n  if (gameState[8] === 0)\n    openCorners.push(8);\n  // The computer now knows which corners are open, and will find all winning combinations involving these corners.\n  var combosConsidered = [];\n  for (let i in openCorners) {\n    combosConsidered = combosConsidered.concat(winningIndicies.filter(c => c.includes(openCorners[i])));\n  }\n  var openSpots = [];\n  for (let i in combosConsidered) {\n    // As was done earlier for the blocking/winning move, a shallow copy of the winning combination is created so that the original remains unchanged.\n    let combo = combosConsidered[i].slice(0);\n    // If a user's marker is found in one of the spaces of a winningCombo, the remaining open spots will be recorded in the openSpots array, with the index corresponding to the index of the same array in combosConsidered.\n    // The computer will also \"discard\" an index if it's spot is not one of those specified in openCorners.\n    for (let j = combo.length - 1; j >= 0; j--) {\n      if ((computerMarker * -1) === gameState[combo[j]] || !openCorners.includes(combo[j]))\n        combo.splice(j, 1);\n    }\n    openSpots = openSpots.concat(combo);\n  }\n  // As long as there is a corner spot available, the computer will place its marker in the one that it has determined to be most effective. If there are none available, the computer then begins to check for which of the remaining spots to place a marker in.\n  if (openCorners.length !== 0) {\n    return mode(openSpots);\n  } else {\n    let availableSpaces = [];\n    for (let i in gameState) {\n      if (gameState[i] === 0)\n        availableSpaces.push(parseInt(i, 10));\n    }\n    return availableSpaces[Math.floor(Math.random() * Math.max(availableSpaces.length))];\n  }\n}\n","import React, { Component } from 'react';\nimport Square from '../square/Square';\nimport {cpuMoves, winningIndicies} from '../../cpuMoves'\n\nimport './GameBoard.css';\n\nclass GameBoard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playersTurn: props.isPlayerFirst,\n      playerMarker: props.isPlayerX ? 1 : -1,\n      playerMoves: 0,\n      computerMoves: 0,\n      gameArray: Array(9).fill(0),\n      isGameOver: false\n    }\n  }\n\n  componentDidMount() {\n    if (!this.state.playersTurn) {\n      this.selectSquare(cpuMoves(this.state.gameArray, this.state.playerMarker * -1));\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    for (let i in winningIndicies) {\n      let combo = winningIndicies[i];\n      if (this.gameOverVerification(this.state, combo) && !prevState.isGameOver) {\n        this.setState({isGameOver: !prevState.isGameOver}, () => { console.log('game over'); });\n        break;\n      }\n    }\n    if (prevState.playersTurn !== this.state.playersTurn && !this.state.playersTurn) {\n      // computer must make Moves\n      this.selectSquare(cpuMoves(this.state.gameArray, this.state.playerMarker * -1));\n    }\n  }\n\n  gameOverVerification = (state, combo) => {\n    return (state.gameArray[combo[0]] === state.gameArray[combo[1]]\n      && state.gameArray[combo[1]] === state.gameArray[combo[2]]\n      && state.gameArray[combo[0]] !== 0\n      && state.gameArray[combo[1]] !== 0\n      && state.gameArray[combo[2]] !== 0) || !state.gameArray.includes(0);\n  }\n\n  selectSquare = (index) => {\n    const selected = this.state.gameArray[index] !== 0;\n    if (!selected && !this.state.isGameOver) {\n      if (this.state.playersTurn === true) {\n        let newGameArray = this.state.gameArray.slice(0, index).concat(this.state.playerMarker, this.state.gameArray.slice(index + 1, this.state.gameArray.length));\n        this.setState(prevState => ({\n          gameArray: newGameArray,\n          playersTurn: !prevState.playersTurn,\n          playerMoves: prevState.playerMoves + 1\n        }));\n      } else {\n        let newGameArray = this.state.gameArray.slice(0, index).concat(this.state.playerMarker * -1, this.state.gameArray.slice(index + 1, this.state.gameArray.length));\n        this.setState(prevState => ({\n          gameArray: newGameArray,\n          playersTurn: !prevState.playersTurn,\n          computerMoves: prevState.computerMoves + 1\n        }));\n      }\n    } else {\n      console.log('this square is selected/game is over');\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"gameboard-container\">\n        <div className=\"gameboard-header\">\n          <div className=\"user-status\">\n            <div className=\"player-name\">You</div>\n            <div className=\"player-moves\">Moves: {this.state.playerMoves}</div>\n          </div>\n          <div className=\"cpu-status\">\n            <div className=\"player-name\">Computer</div>\n            <div className=\"player-moves\">Moves: {this.state.computerMoves}</div>\n          </div>\n        </div>\n        <div className=\"gameboard-game\">\n          <div className=\"gameboard-row\">\n            <Square index={0} marker={this.state.gameArray[0]} onClick={() => this.selectSquare(0)} />\n            <Square index={1} marker={this.state.gameArray[1]} onClick={() => this.selectSquare(1)} />\n            <Square index={2} marker={this.state.gameArray[2]} onClick={() => this.selectSquare(2)} />\n          </div>\n          <div className=\"gameboard-row\">\n            <Square index={3} marker={this.state.gameArray[3]} onClick={() => this.selectSquare(3)} />\n            <Square index={4} marker={this.state.gameArray[4]} onClick={() => this.selectSquare(4)} />\n            <Square index={5} marker={this.state.gameArray[5]} onClick={() => this.selectSquare(5)} />\n          </div>\n          <div className=\"gameboard-row\">\n            <Square index={6} marker={this.state.gameArray[6]} onClick={() => this.selectSquare(6)} />\n            <Square index={7} marker={this.state.gameArray[7]} onClick={() => this.selectSquare(7)} />\n            <Square index={8} marker={this.state.gameArray[8]} onClick={() => this.selectSquare(8)} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default GameBoard;\n","import React, { Component } from 'react';\nimport Setup from '../setup/Setup';\nimport GameBoard from '../gameboard/GameBoard';\n\nimport './Main.css';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStarted: false,\n      isPlayerFirst: true,\n      isPlayerX: true,\n    }\n  }\n\n  setFirstPlayer = (isPlayerFirst) => {\n    if (this.state.isPlayerFirst !== isPlayerFirst) {\n        this.setState({isPlayerFirst});\n    }\n  }\n\n  setPlayerMarker = (isPlayerX) => {\n    if (this.state.isPlayerX !== isPlayerX) {\n        this.setState({isPlayerX});\n    }\n  }\n\n  startGame = () => {\n    this.setState({ gameStarted: true });\n  }\n\n  render() {\n    if (this.state.gameStarted) {\n      return (\n          <GameBoard\n            isPlayerFirst={this.state.isPlayerFirst}\n            isPlayerX={this.state.isPlayerX}\n          />\n      )\n    } else {\n      return (\n        <Setup\n          isPlayerFirst={this.state.isPlayerFirst}\n          isPlayerX={this.state.isPlayerX}\n          setFirstPlayer={this.setFirstPlayer}\n          setPlayerMarker={this.setPlayerMarker}\n          startGame={this.startGame}\n        />\n      )\n    }\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport Main from './components/main/Main';\n\nimport './App.css';\n\nconst App = () => <Main />\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}